/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package Energistics.Datatypes.Object;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ObjectChange extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5322018921390714971L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ObjectChange\",\"namespace\":\"Energistics.Datatypes.Object\",\"fields\":[{\"name\":\"changeType\",\"type\":{\"type\":\"enum\",\"name\":\"ObjectChangeTypes\",\"symbols\":[\"Upsert\",\"Delete\"]}},{\"name\":\"changeTime\",\"type\":\"long\"},{\"name\":\"dataObject\",\"type\":{\"type\":\"record\",\"name\":\"DataObject\",\"fields\":[{\"name\":\"resource\",\"type\":{\"type\":\"record\",\"name\":\"Resource\",\"fields\":[{\"name\":\"uri\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"contentType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"channelSubscribable\",\"type\":\"boolean\"},{\"name\":\"customData\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}},{\"name\":\"resourceType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"hasChildren\",\"type\":\"int\"},{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lastChanged\",\"type\":\"long\"},{\"name\":\"objectNotifiable\",\"type\":\"boolean\"}]}},{\"name\":\"contentEncoding\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"data\",\"type\":\"bytes\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public Energistics.Datatypes.Object.ObjectChangeTypes changeType;
  @Deprecated public long changeTime;
  @Deprecated public Energistics.Datatypes.Object.DataObject dataObject;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ObjectChange() {}

  /**
   * All-args constructor.
   * @param changeType The new value for changeType
   * @param changeTime The new value for changeTime
   * @param dataObject The new value for dataObject
   */
  public ObjectChange(Energistics.Datatypes.Object.ObjectChangeTypes changeType, java.lang.Long changeTime, Energistics.Datatypes.Object.DataObject dataObject) {
    this.changeType = changeType;
    this.changeTime = changeTime;
    this.dataObject = dataObject;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return changeType;
    case 1: return changeTime;
    case 2: return dataObject;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: changeType = (Energistics.Datatypes.Object.ObjectChangeTypes)value$; break;
    case 1: changeTime = (java.lang.Long)value$; break;
    case 2: dataObject = (Energistics.Datatypes.Object.DataObject)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'changeType' field.
   * @return The value of the 'changeType' field.
   */
  public Energistics.Datatypes.Object.ObjectChangeTypes getChangeType() {
    return changeType;
  }

  /**
   * Sets the value of the 'changeType' field.
   * @param value the value to set.
   */
  public void setChangeType(Energistics.Datatypes.Object.ObjectChangeTypes value) {
    this.changeType = value;
  }

  /**
   * Gets the value of the 'changeTime' field.
   * @return The value of the 'changeTime' field.
   */
  public java.lang.Long getChangeTime() {
    return changeTime;
  }

  /**
   * Sets the value of the 'changeTime' field.
   * @param value the value to set.
   */
  public void setChangeTime(java.lang.Long value) {
    this.changeTime = value;
  }

  /**
   * Gets the value of the 'dataObject' field.
   * @return The value of the 'dataObject' field.
   */
  public Energistics.Datatypes.Object.DataObject getDataObject() {
    return dataObject;
  }

  /**
   * Sets the value of the 'dataObject' field.
   * @param value the value to set.
   */
  public void setDataObject(Energistics.Datatypes.Object.DataObject value) {
    this.dataObject = value;
  }

  /**
   * Creates a new ObjectChange RecordBuilder.
   * @return A new ObjectChange RecordBuilder
   */
  public static Energistics.Datatypes.Object.ObjectChange.Builder newBuilder() {
    return new Energistics.Datatypes.Object.ObjectChange.Builder();
  }

  /**
   * Creates a new ObjectChange RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ObjectChange RecordBuilder
   */
  public static Energistics.Datatypes.Object.ObjectChange.Builder newBuilder(Energistics.Datatypes.Object.ObjectChange.Builder other) {
    return new Energistics.Datatypes.Object.ObjectChange.Builder(other);
  }

  /**
   * Creates a new ObjectChange RecordBuilder by copying an existing ObjectChange instance.
   * @param other The existing instance to copy.
   * @return A new ObjectChange RecordBuilder
   */
  public static Energistics.Datatypes.Object.ObjectChange.Builder newBuilder(Energistics.Datatypes.Object.ObjectChange other) {
    return new Energistics.Datatypes.Object.ObjectChange.Builder(other);
  }

  /**
   * RecordBuilder for ObjectChange instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ObjectChange>
    implements org.apache.avro.data.RecordBuilder<ObjectChange> {

    private Energistics.Datatypes.Object.ObjectChangeTypes changeType;
    private long changeTime;
    private Energistics.Datatypes.Object.DataObject dataObject;
    private Energistics.Datatypes.Object.DataObject.Builder dataObjectBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Energistics.Datatypes.Object.ObjectChange.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.changeType)) {
        this.changeType = data().deepCopy(fields()[0].schema(), other.changeType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.changeTime)) {
        this.changeTime = data().deepCopy(fields()[1].schema(), other.changeTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dataObject)) {
        this.dataObject = data().deepCopy(fields()[2].schema(), other.dataObject);
        fieldSetFlags()[2] = true;
      }
      if (other.hasDataObjectBuilder()) {
        this.dataObjectBuilder = Energistics.Datatypes.Object.DataObject.newBuilder(other.getDataObjectBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing ObjectChange instance
     * @param other The existing instance to copy.
     */
    private Builder(Energistics.Datatypes.Object.ObjectChange other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.changeType)) {
        this.changeType = data().deepCopy(fields()[0].schema(), other.changeType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.changeTime)) {
        this.changeTime = data().deepCopy(fields()[1].schema(), other.changeTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dataObject)) {
        this.dataObject = data().deepCopy(fields()[2].schema(), other.dataObject);
        fieldSetFlags()[2] = true;
      }
      this.dataObjectBuilder = null;
    }

    /**
      * Gets the value of the 'changeType' field.
      * @return The value.
      */
    public Energistics.Datatypes.Object.ObjectChangeTypes getChangeType() {
      return changeType;
    }

    /**
      * Sets the value of the 'changeType' field.
      * @param value The value of 'changeType'.
      * @return This builder.
      */
    public Energistics.Datatypes.Object.ObjectChange.Builder setChangeType(Energistics.Datatypes.Object.ObjectChangeTypes value) {
      validate(fields()[0], value);
      this.changeType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'changeType' field has been set.
      * @return True if the 'changeType' field has been set, false otherwise.
      */
    public boolean hasChangeType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'changeType' field.
      * @return This builder.
      */
    public Energistics.Datatypes.Object.ObjectChange.Builder clearChangeType() {
      changeType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'changeTime' field.
      * @return The value.
      */
    public java.lang.Long getChangeTime() {
      return changeTime;
    }

    /**
      * Sets the value of the 'changeTime' field.
      * @param value The value of 'changeTime'.
      * @return This builder.
      */
    public Energistics.Datatypes.Object.ObjectChange.Builder setChangeTime(long value) {
      validate(fields()[1], value);
      this.changeTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'changeTime' field has been set.
      * @return True if the 'changeTime' field has been set, false otherwise.
      */
    public boolean hasChangeTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'changeTime' field.
      * @return This builder.
      */
    public Energistics.Datatypes.Object.ObjectChange.Builder clearChangeTime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'dataObject' field.
      * @return The value.
      */
    public Energistics.Datatypes.Object.DataObject getDataObject() {
      return dataObject;
    }

    /**
      * Sets the value of the 'dataObject' field.
      * @param value The value of 'dataObject'.
      * @return This builder.
      */
    public Energistics.Datatypes.Object.ObjectChange.Builder setDataObject(Energistics.Datatypes.Object.DataObject value) {
      validate(fields()[2], value);
      this.dataObjectBuilder = null;
      this.dataObject = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'dataObject' field has been set.
      * @return True if the 'dataObject' field has been set, false otherwise.
      */
    public boolean hasDataObject() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'dataObject' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Energistics.Datatypes.Object.DataObject.Builder getDataObjectBuilder() {
      if (dataObjectBuilder == null) {
        if (hasDataObject()) {
          setDataObjectBuilder(Energistics.Datatypes.Object.DataObject.newBuilder(dataObject));
        } else {
          setDataObjectBuilder(Energistics.Datatypes.Object.DataObject.newBuilder());
        }
      }
      return dataObjectBuilder;
    }

    /**
     * Sets the Builder instance for the 'dataObject' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Energistics.Datatypes.Object.ObjectChange.Builder setDataObjectBuilder(Energistics.Datatypes.Object.DataObject.Builder value) {
      clearDataObject();
      dataObjectBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'dataObject' field has an active Builder instance
     * @return True if the 'dataObject' field has an active Builder instance
     */
    public boolean hasDataObjectBuilder() {
      return dataObjectBuilder != null;
    }

    /**
      * Clears the value of the 'dataObject' field.
      * @return This builder.
      */
    public Energistics.Datatypes.Object.ObjectChange.Builder clearDataObject() {
      dataObject = null;
      dataObjectBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public ObjectChange build() {
      try {
        ObjectChange record = new ObjectChange();
        record.changeType = fieldSetFlags()[0] ? this.changeType : (Energistics.Datatypes.Object.ObjectChangeTypes) defaultValue(fields()[0]);
        record.changeTime = fieldSetFlags()[1] ? this.changeTime : (java.lang.Long) defaultValue(fields()[1]);
        if (dataObjectBuilder != null) {
          record.dataObject = this.dataObjectBuilder.build();
        } else {
          record.dataObject = fieldSetFlags()[2] ? this.dataObject : (Energistics.Datatypes.Object.DataObject) defaultValue(fields()[2]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
