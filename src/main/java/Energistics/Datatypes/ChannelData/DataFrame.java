/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package Energistics.Datatypes.ChannelData;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DataFrame extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3679494091260735597L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataFrame\",\"namespace\":\"Energistics.Datatypes.ChannelData\",\"fields\":[{\"name\":\"index\",\"type\":{\"type\":\"array\",\"items\":\"long\"}},{\"name\":\"data\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"DataValue\",\"namespace\":\"Energistics.Datatypes\",\"fields\":[{\"name\":\"item\",\"type\":[\"null\",\"double\",\"float\",\"int\",\"long\",{\"type\":\"string\",\"avro.java.string\":\"String\"},{\"type\":\"record\",\"name\":\"ArrayOfDouble\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"double\"}}]},\"boolean\",\"bytes\"]}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<java.lang.Long> index;
  @Deprecated public java.util.List<Energistics.Datatypes.DataValue> data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DataFrame() {}

  /**
   * All-args constructor.
   * @param index The new value for index
   * @param data The new value for data
   */
  public DataFrame(java.util.List<java.lang.Long> index, java.util.List<Energistics.Datatypes.DataValue> data) {
    this.index = index;
    this.data = data;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return index;
    case 1: return data;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: index = (java.util.List<java.lang.Long>)value$; break;
    case 1: data = (java.util.List<Energistics.Datatypes.DataValue>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'index' field.
   * @return The value of the 'index' field.
   */
  public java.util.List<java.lang.Long> getIndex() {
    return index;
  }

  /**
   * Sets the value of the 'index' field.
   * @param value the value to set.
   */
  public void setIndex(java.util.List<java.lang.Long> value) {
    this.index = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return The value of the 'data' field.
   */
  public java.util.List<Energistics.Datatypes.DataValue> getData() {
    return data;
  }

  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(java.util.List<Energistics.Datatypes.DataValue> value) {
    this.data = value;
  }

  /**
   * Creates a new DataFrame RecordBuilder.
   * @return A new DataFrame RecordBuilder
   */
  public static Energistics.Datatypes.ChannelData.DataFrame.Builder newBuilder() {
    return new Energistics.Datatypes.ChannelData.DataFrame.Builder();
  }

  /**
   * Creates a new DataFrame RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DataFrame RecordBuilder
   */
  public static Energistics.Datatypes.ChannelData.DataFrame.Builder newBuilder(Energistics.Datatypes.ChannelData.DataFrame.Builder other) {
    return new Energistics.Datatypes.ChannelData.DataFrame.Builder(other);
  }

  /**
   * Creates a new DataFrame RecordBuilder by copying an existing DataFrame instance.
   * @param other The existing instance to copy.
   * @return A new DataFrame RecordBuilder
   */
  public static Energistics.Datatypes.ChannelData.DataFrame.Builder newBuilder(Energistics.Datatypes.ChannelData.DataFrame other) {
    return new Energistics.Datatypes.ChannelData.DataFrame.Builder(other);
  }

  /**
   * RecordBuilder for DataFrame instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataFrame>
    implements org.apache.avro.data.RecordBuilder<DataFrame> {

    private java.util.List<java.lang.Long> index;
    private java.util.List<Energistics.Datatypes.DataValue> data;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Energistics.Datatypes.ChannelData.DataFrame.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.index)) {
        this.index = data().deepCopy(fields()[0].schema(), other.index);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.data)) {
        this.data = data().deepCopy(fields()[1].schema(), other.data);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DataFrame instance
     * @param other The existing instance to copy.
     */
    private Builder(Energistics.Datatypes.ChannelData.DataFrame other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.index)) {
        this.index = data().deepCopy(fields()[0].schema(), other.index);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.data)) {
        this.data = data().deepCopy(fields()[1].schema(), other.data);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'index' field.
      * @return The value.
      */
    public java.util.List<java.lang.Long> getIndex() {
      return index;
    }

    /**
      * Sets the value of the 'index' field.
      * @param value The value of 'index'.
      * @return This builder.
      */
    public Energistics.Datatypes.ChannelData.DataFrame.Builder setIndex(java.util.List<java.lang.Long> value) {
      validate(fields()[0], value);
      this.index = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'index' field has been set.
      * @return True if the 'index' field has been set, false otherwise.
      */
    public boolean hasIndex() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'index' field.
      * @return This builder.
      */
    public Energistics.Datatypes.ChannelData.DataFrame.Builder clearIndex() {
      index = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * @return The value.
      */
    public java.util.List<Energistics.Datatypes.DataValue> getData() {
      return data;
    }

    /**
      * Sets the value of the 'data' field.
      * @param value The value of 'data'.
      * @return This builder.
      */
    public Energistics.Datatypes.ChannelData.DataFrame.Builder setData(java.util.List<Energistics.Datatypes.DataValue> value) {
      validate(fields()[1], value);
      this.data = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'data' field.
      * @return This builder.
      */
    public Energistics.Datatypes.ChannelData.DataFrame.Builder clearData() {
      data = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public DataFrame build() {
      try {
        DataFrame record = new DataFrame();
        record.index = fieldSetFlags()[0] ? this.index : (java.util.List<java.lang.Long>) defaultValue(fields()[0]);
        record.data = fieldSetFlags()[1] ? this.data : (java.util.List<Energistics.Datatypes.DataValue>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
