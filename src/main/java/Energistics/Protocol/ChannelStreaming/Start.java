/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package Energistics.Protocol.ChannelStreaming;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Start extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7146729172579821823L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Start\",\"namespace\":\"Energistics.Protocol.ChannelStreaming\",\"fields\":[{\"name\":\"maxMessageRate\",\"type\":\"int\"},{\"name\":\"maxDataItems\",\"type\":\"int\"}],\"messageType\":\"0\",\"protocol\":\"1\",\"senderRole\":\"consumer\",\"protocolRoles\":\"producer,consumer\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int maxMessageRate;
  @Deprecated public int maxDataItems;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Start() {}

  /**
   * All-args constructor.
   * @param maxMessageRate The new value for maxMessageRate
   * @param maxDataItems The new value for maxDataItems
   */
  public Start(java.lang.Integer maxMessageRate, java.lang.Integer maxDataItems) {
    this.maxMessageRate = maxMessageRate;
    this.maxDataItems = maxDataItems;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return maxMessageRate;
    case 1: return maxDataItems;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: maxMessageRate = (java.lang.Integer)value$; break;
    case 1: maxDataItems = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'maxMessageRate' field.
   * @return The value of the 'maxMessageRate' field.
   */
  public java.lang.Integer getMaxMessageRate() {
    return maxMessageRate;
  }

  /**
   * Sets the value of the 'maxMessageRate' field.
   * @param value the value to set.
   */
  public void setMaxMessageRate(java.lang.Integer value) {
    this.maxMessageRate = value;
  }

  /**
   * Gets the value of the 'maxDataItems' field.
   * @return The value of the 'maxDataItems' field.
   */
  public java.lang.Integer getMaxDataItems() {
    return maxDataItems;
  }

  /**
   * Sets the value of the 'maxDataItems' field.
   * @param value the value to set.
   */
  public void setMaxDataItems(java.lang.Integer value) {
    this.maxDataItems = value;
  }

  /**
   * Creates a new Start RecordBuilder.
   * @return A new Start RecordBuilder
   */
  public static Energistics.Protocol.ChannelStreaming.Start.Builder newBuilder() {
    return new Energistics.Protocol.ChannelStreaming.Start.Builder();
  }

  /**
   * Creates a new Start RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Start RecordBuilder
   */
  public static Energistics.Protocol.ChannelStreaming.Start.Builder newBuilder(Energistics.Protocol.ChannelStreaming.Start.Builder other) {
    return new Energistics.Protocol.ChannelStreaming.Start.Builder(other);
  }

  /**
   * Creates a new Start RecordBuilder by copying an existing Start instance.
   * @param other The existing instance to copy.
   * @return A new Start RecordBuilder
   */
  public static Energistics.Protocol.ChannelStreaming.Start.Builder newBuilder(Energistics.Protocol.ChannelStreaming.Start other) {
    return new Energistics.Protocol.ChannelStreaming.Start.Builder(other);
  }

  /**
   * RecordBuilder for Start instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Start>
    implements org.apache.avro.data.RecordBuilder<Start> {

    private int maxMessageRate;
    private int maxDataItems;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Energistics.Protocol.ChannelStreaming.Start.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.maxMessageRate)) {
        this.maxMessageRate = data().deepCopy(fields()[0].schema(), other.maxMessageRate);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.maxDataItems)) {
        this.maxDataItems = data().deepCopy(fields()[1].schema(), other.maxDataItems);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Start instance
     * @param other The existing instance to copy.
     */
    private Builder(Energistics.Protocol.ChannelStreaming.Start other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.maxMessageRate)) {
        this.maxMessageRate = data().deepCopy(fields()[0].schema(), other.maxMessageRate);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.maxDataItems)) {
        this.maxDataItems = data().deepCopy(fields()[1].schema(), other.maxDataItems);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'maxMessageRate' field.
      * @return The value.
      */
    public java.lang.Integer getMaxMessageRate() {
      return maxMessageRate;
    }

    /**
      * Sets the value of the 'maxMessageRate' field.
      * @param value The value of 'maxMessageRate'.
      * @return This builder.
      */
    public Energistics.Protocol.ChannelStreaming.Start.Builder setMaxMessageRate(int value) {
      validate(fields()[0], value);
      this.maxMessageRate = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'maxMessageRate' field has been set.
      * @return True if the 'maxMessageRate' field has been set, false otherwise.
      */
    public boolean hasMaxMessageRate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'maxMessageRate' field.
      * @return This builder.
      */
    public Energistics.Protocol.ChannelStreaming.Start.Builder clearMaxMessageRate() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxDataItems' field.
      * @return The value.
      */
    public java.lang.Integer getMaxDataItems() {
      return maxDataItems;
    }

    /**
      * Sets the value of the 'maxDataItems' field.
      * @param value The value of 'maxDataItems'.
      * @return This builder.
      */
    public Energistics.Protocol.ChannelStreaming.Start.Builder setMaxDataItems(int value) {
      validate(fields()[1], value);
      this.maxDataItems = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'maxDataItems' field has been set.
      * @return True if the 'maxDataItems' field has been set, false otherwise.
      */
    public boolean hasMaxDataItems() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'maxDataItems' field.
      * @return This builder.
      */
    public Energistics.Protocol.ChannelStreaming.Start.Builder clearMaxDataItems() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Start build() {
      try {
        Start record = new Start();
        record.maxMessageRate = fieldSetFlags()[0] ? this.maxMessageRate : (java.lang.Integer) defaultValue(fields()[0]);
        record.maxDataItems = fieldSetFlags()[1] ? this.maxDataItems : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
